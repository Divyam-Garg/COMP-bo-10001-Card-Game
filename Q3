from reference import comp10001bo_match_build, comp10001bo_match_discard

from common import top_card

# build pile play types
INVALID_PLAY = 0
VALID_NONFINAL_PLAY = 1
VALID_FINAL_PLAY = 2
NO_PLAY = 3

PLAY_FROM_HAND = 0
PLAY_FROM_DISCARD_PILE = 1
PLAY_FROM_STOCKPILE = 2
NO_POSSIBLE_PLAY = 3

PLAY_TYPE = 0
SOURCE = 1
DESTINATION = 2

#Constatns to use with play[DESTINATION]
PILE_TYPE = 0
BP = 0 
DP = 1
BP_NO = 1
DP_SPECS = 1
DP_OWNER_NO = 0
DP_NO = 1

#Constants to use with play[SOURCE]
CARD = 0
DP_SPECS = 1
DP_OWNER_NO = 0
DP_NO = 1

STOCKPILE_TOP_CARD = 0
STOCKPILE_CARD_NO = 1

def valid_play_to_discard_piles(card, discard_piles, player_no, 
                                from_hand=True):
    '''Returns if card is playable to any discard pile in the game'''
    for player in discard_piles:
        for end_pile in player:
            if comp10001bo_match_discard(card, end_pile, player_no,
                                         player, from_hand):
                return True
    return False
    
def valid_play_to_build_piles(card, build_piles):
    '''Returns if card is playable to any build pile in the game'''
    for build_pile in build_piles:
        if comp10001bo_match_build(card, build_pile):
            return True
    return False
    
def comp10001bo_is_valid_play(play, player_no, hand, stockpiles, discard_piles,
                              build_piles):
    """
    Returns:
    -0 if the play is invalid
    -1 if the play is a valid non-turn-ending play
    -2 if the play is a valid turn-ending play
    -3 if there is no possible play
    """    
    
    #When player claims no valid move is possible
    if play[PLAY_TYPE] == NO_POSSIBLE_PLAY:
        
        #Check if any valid move possible with cards in hand
        for card in hand:
            #Checking for play to other discard piles
            if valid_play_to_discard_piles(card, discard_piles, player_no):
                return INVALID_PLAY
            
            #Checking for play to build_piles    
            if valid_play_to_build_piles(card, build_piles):
                return INVALID_PLAY
            
        #List of all non-hand cards that can be played. i.e own stockpile top
        #card and top cards of all discard piles
        all_other_playable_cards = []
        
        #Add top card of own stockpile to 'all_playable_cards'
        stockpile_card = stockpiles[player_no][STOCKPILE_TOP_CARD]
        all_other_playable_cards.append(stockpile_card)
        
        #Add top cards of all non empty discard piles to 'all_playable_cards'
        for players_piles in discard_piles:
            for pile in players_piles:
                if len(pile) > 0:
                    all_other_playable_cards.append(top_card(pile))
        
        #Check if any valid move possible with non-hand cards
        for card in all_other_playable_cards:    
            #Checking for play to other discard piles
            if valid_play_to_discard_piles(card, discard_piles, player_no,
                                           from_hand=False):
                return INVALID_PLAY
            
            #Checking for play to build_piles    
            if valid_play_to_build_piles(card, build_piles):
                return INVALID_PLAY
        
        #If none of the above plays possible, no valid plays are possible
        return NO_PLAY
    
    #When play is from a card in hand
    elif play[PLAY_TYPE] == PLAY_FROM_HAND:
        
        #Card to be played
        card = play[SOURCE]
        
        #Check that card is actually present in the hand
        card_in_hand = False
        for c in hand:
            if c == card:
                card_in_hand = True
        
        if not card_in_hand:
            return INVALID_PLAY
        
        #If card claimed to be played to a build pile, check if valid
        if play[DESTINATION][PILE_TYPE] == BP:
            bp_no = play[DESTINATION][BP_NO]
            if not 0 <= bp_no <= 3:
                return INVALID_PLAY
            req_bp = build_piles[bp_no]
            if comp10001bo_match_build(card, req_bp):
                return VALID_NONFINAL_PLAY
            else:
                return INVALID_PLAY
        
        #If card claimed to be played to a discard pile, check if valid
        elif play[DESTINATION][PILE_TYPE] == DP:
            final_dp_owner_no = play[DESTINATION][DP_SPECS][DP_OWNER_NO]
            final_dp_no = play[DESTINATION][DP_SPECS][DP_NO]
            final_dp = discard_piles[final_dp_owner_no][final_dp_no]
            return comp10001bo_match_discard(card, final_dp, player_no, 
                                             final_dp_owner_no)
    
    #When play from card on top of a discard pile or own stockpile
    elif (play[PLAY_TYPE] == PLAY_FROM_DISCARD_PILE or 
          play[PLAY_TYPE] == PLAY_FROM_STOCKPILE):
        
        #When play from card on top of a discard pile
        if play[PLAY_TYPE] == PLAY_FROM_DISCARD_PILE:

            #Card to be played
            card = play[SOURCE][CARD] 

            #Check if card to be played exists where it says its coming from
            start_dp_owner_no = play[SOURCE][DP_SPECS][DP_OWNER_NO]
            start_dp_no = play[SOURCE][DP_SPECS][DP_NO]
            start_dp = discard_piles[start_dp_owner_no][start_dp_no]
            card_on_claimed_pile = top_card(start_dp)
            if card != card_on_claimed_pile:
                return INVALID_PLAY  
        
        #When play from a card on top of own stockpile
        elif play[PLAY_TYPE] == PLAY_FROM_STOCKPILE:

            #Card to be played
            card = play[SOURCE]

            #Check if the card to be played is actually the players stockpiles 
            #top card
            top_card_own_stockpile = stockpiles[player_no][STOCKPILE_TOP_CARD]
            if card != top_card_own_stockpile:
                return INVALID_PLAY

        #If card claimed to be played to a build pile, check if valid
        if play[DESTINATION][PILE_TYPE] == BP:
            bp_no = play[DESTINATION][BP_NO]
            if not 0 <= bp_no <= 3:
                return INVALID_PLAY
            req_bp = build_piles[bp_no]
            if comp10001bo_match_build(card, req_bp):
                return VALID_NONFINAL_PLAY
            else:
                return INVALID_PLAY

        #If card claimed to be played to a discard pile, check if valid
        elif play[DESTINATION][PILE_TYPE] == DP:
            final_dp_owner_no = play[DESTINATION][DP_SPECS][DP_OWNER_NO]
            final_dp_no = play[DESTINATION][DP_SPECS][DP_NO]
            final_dp = discard_piles[final_dp_owner_no][final_dp_no]
            return comp10001bo_match_discard(card, final_dp, player_no, 
                                             final_dp_owner_no, 
                                             from_hand=False)

        
# automatically run each of the examples from the question
if __name__ == "__main__":
    tests = (
        # NON-FINAL VALID (from hand to build pile 0)
        (VALID_NONFINAL_PLAY, (0, '2C', (0, 0)), 0,
         ['2C', 'AS', '9D', '0D', '0S'],
         (('9C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), ([], [], [], []),
          ([], [], [], []), ([], [], [], [])), ([], [], [], [])),

        # INVALID: doesn't hold card
        (INVALID_PLAY, (0, '2C', (0, 0)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('9C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), ([], [], [], []),
          ([], [], [], []), ([], [], [], [])), ([], [], [], [])),

        # INVALID: invalid pile (build pile 4)
        (INVALID_PLAY, (0, '3C', (0, 4)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('9C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), ([], [], [], []), ([], [], [], []),
          ([], [], [], [])), ([], [], [], [])),
        
        # INVALID: can't play to build pile 0 (can't start with 3)
        (INVALID_PLAY, (0, '3C', (0, 0)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('9C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), ([], [], [], []), ([], [], [], []),
          ([], [], [], [])), ([], [], [], [])),

        # NON-FINAL VALID (from hand to non-empty build pile 0)
        (VALID_NONFINAL_PLAY, (0, '3C', (0, 0)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('9C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), ([], [], [], []), ([], [], [], []),
          ([], [], [], [])), (['2S'], [], [], [])),

        # NON-FINAL VALID (from stockpile to empty build pile 1)
        (VALID_NONFINAL_PLAY, (2, '2C', (0, 1)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('2C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), ([], [], [], []), ([], [], [], []),
          ([], [], [], [])), (['2S'], [], [], [])),

        # INVALID: attempt to play card that is not top card of own stockpile
        (INVALID_PLAY, (2, '2H', (0, 1)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('2C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), ([], [], [], []), ([], [], [], []),
          ([], [], [], [])), (['2S'], [], [], [])),

        # INVALID: attempt to play card that is not top card of
        # own stockpile (despite being top card of someone else's stockpile)
        (INVALID_PLAY, (2, '2H', (0, 1)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('2C', 8), ('2H', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), ([], [], [], []), ([], [], [], []),
          ([], [], [], [])), (['2S'], [], [], [])),

        # NON-FINAL VALID (from stockpile to non-empty build pile)
        (VALID_NONFINAL_PLAY, (2, 'QC', (0, 1)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('QC', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), ([], [], [], []), ([], [], [], []),
          ([], [], [], [])), ([], ['KS'], [], [])),

        # NON-FINAL VALID (from stockpile to *empty* build pile 1)
        (VALID_NONFINAL_PLAY, (2, 'KC', (0, 1)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('KC', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), ([], [], [], []), ([], [], [], []),
          ([], [], [], [])), ([], [], [], [])),

        # NON-FINAL VALID (from discard pile to empty build pile 0)
        (VALID_NONFINAL_PLAY, (1, ('2C', (1, 0)), (0, 1)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('2C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), (['3C', '2C'], [], [], []), ([], [], [], []),
          ([], [], [], [])), (['2S'], [], [], [])),

        # INVALID: attempt to access non-top card from
        # discard stack 0 of player 1 
        (INVALID_PLAY, (1, ('3C', (1, 0)), (0, 1)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('2C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), (['3C', '2C'], [], [], []), ([], [], [], []),
          ([], [], [], [])), (['2S'], [], [], [])),

        # INVALID: can't place 2C (from discard stack 0 of Player 1)
        # on 2S (build stack 0)
        (INVALID_PLAY, (1, ('2C', (1, 0)), (0, 0)), 0,
         ['3C', 'AS', '9D', '0D', '0S'],
         (('2C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         (([], [], [], []), (['3C', '2C'], [], [], []), ([], [], [], []),
          ([], [], [], [])), (['2S'], [], [], [])),

        # FINAL VALID: can place 9D (from hand) on 5S (discard
        # stack 0 of Player 0), but final play for turn
        (VALID_FINAL_PLAY, (0, '9D', (1, (0, 0))), 0,
         ['AS', '9D', '0D', '0S'],
         (('9C', 8), ('0D', 8), ('3H', 8), ('KD', 8)),
         ((['5S'], [], [], []), ([], [], [], []), ([], [], [], []),
          ([], [], [], [])), ([], [], [], [])),

        # INVALID: can make a number of different plays
        (INVALID_PLAY, (3, None, (None, None)), 0, 
         ['AS', '9D', '0S'], 
         (('9C', 8), ('0D', 8), ('3H', 8), ('KD', 8)), 
         ((['5S'], [], [], []), ([], [], [], []), ([], [], [], []),
          ([], [], [], [])), ([], [], [], [])),

        # NO_PLAY: no move possible (yes, it's an impossible game
        # state, but it proves a point)
        (NO_PLAY, (3, None, (None, None)), 0, [], 
         (('9C', 8), ('0D', 8), ('3H', 8), ('KD', 8)), 
         ((['5S'], [], [], []), ([], [], [], []), ([], [], [], []), 
          ([], [], [], [])), ([], [], [], [])),

        # INVALID (attempt to move card from discard pile back to
        # same discard pile)
        (INVALID_PLAY, (1, ('2C', (1, 0)), (1, (1, 0))), 0,
         ['3C', 'AS', '9D', '0D', '0S'], 
         (('2C', 8), ('0D', 8), ('3H', 8), ('KD', 8)), 
         (([], [], [], []), (['3C', '2C'], [], [], []),
          ([], [], [], []), ([], [], [], [])), (['2S'], [], [], [])),


    )

    for retval, *args in tests:
        if comp10001bo_is_valid_play(*args) == retval:
            result = "passed"
        else:
            result = "failed"
        print("Testing comp10001bo_is_valid_play{} ... {}".format(
            repr(tuple(args)), result))
